@FunctionalInterface //annotates a class to have a one abstract method which is a typical functional interface
public interface Flyable {
    int fly();
}

Interfaces in java
 * Consumer
 * BiConsumed
 * Supplier
 * Function
 * BiFunction
 * Predicate
 * BiPredicate
 * Unary Operator
 * Binary operator
 * Double Supplier
 * IntPredicate
 *LongFunction
 *ObjDoubleConsumer
 *ObjIntConsumer
 *ObjLongConsumer
 *IntUnaryOperator




 1. Consumer Interface takes one parameter and returns nothing
 2. BiConsumer takes two parameter and returns nothing
 3. Supplier takes nothing  and returns something
 4. Function collects one args, a return type and returns something
 5. BiFunction collects two args, return type and returns something
 6. Predicate takes one argument and returns true or false
 7. BiPredicate takes two args and returns true or false
 8.Unary takes one thing and return one thing of that same type
 9. Binary operator takes two things of same type and return something of same type
 10. Double supplier is specialized to always produce double results; specifically works with primitive type double
 11. IntPredicate takes an int value and returns a boolean, only works with primitive type int
 12. LongFunction specializes in taking type long as argument and returning any type
 13. ObjDoubleConsumer takes two things( Object and double) and returns nothing
 14. ObjIntConsumer takes two args (Object and int) and returns nothing
 15. ObjLongConsumer takes (Obj and int) and returns nothing
 16. IntUnaryOperator takes one arg(type int) and returns same

