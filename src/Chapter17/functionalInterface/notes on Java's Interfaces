@FunctionalInterface //annotates a class to have a one abstract method which is a typical functional interface
public interface Flyable {
    int fly();
}

/**Interfaces in java
 * Consumer
 * BiConsumed
 * Supplier
 * Function
 * BiFunction
 * Predicate
 * BiPredicate
 * Unary Operator
 * Binary operator
 * 
 */

 1. Consumer Interface takes one parameter and returns nothing
 2. BiConsumer takes two parameter and returns nothing
 3. Supplier takes nothing  and returns something
 4. Function collects one args, a return type and returns something
 5. BiFunction collects two args, return type and returns something
 6. Predicate takes one argument and returns true or false
 7. BiPredicate takes two args and returns true or false
 8.Unary takes one thing and return one thing of that same type
 9. Binary operator takes two things of same type and return something of same type